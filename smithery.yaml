version: "1.0"

project:
  name: mcp-meilisearch
  description: MCP server that provides a bridge between AI models and Meilisearch
  version: 1.0.0

workspace:
  packages:
    - path: server
      type: app
      target: node

build:
  commands:
    setup:
      description: Install dependencies
      command: npm install

    build:
      description: Build the server
      command: cd server && npm run build

    clean:
      description: Clean build artifacts
      command: rm -rf server/build

    start:
      description: Start the MCP server
      command: cd server && node --env-file=.env build/index.js

    package:
      description: Package the server for deployment
      command: |
        mkdir -p dist
        cp -r server/build dist/
        cp server/package.json dist/
        echo '{"type":"module"}' > dist/package.json

  environment:
    required:
      - MEILISEARCH_HOST
      - MEILISEARCH_API_KEY
    default:
      MEILISEARCH_HOST: http://localhost:7700
      MEILISEARCH_TIMEOUT: 5000

services:
  - name: meilisearch
    description: Meilisearch instance
    type: external
    url: ${MEILISEARCH_HOST}
    health-check: ${MEILISEARCH_HOST}/health

  - name: mcp-server
    description: MCP Server
    type: internal
    path: server
    command: node --env-file=.env build/index.js
    port: 3000
    depends-on:
      - meilisearch

dependencies:
  server:
    - "@modelcontextprotocol/sdk"
    - express
    - axios
    - zod

  development:
    - typescript
    - "@types/express"
    - "@types/node"

deployment:
  artifacts:
    - source: server/build/
      destination: /app
    - source: server/package.json
      destination: /app

  entrypoint: node /app/index.js
  environment_variables:
    - MEILISEARCH_HOST
    - MEILISEARCH_API_KEY
    - MEILISEARCH_TIMEOUT
    - PORT

pipelines:
  default:
    - build

  deploy:
    - setup
    - build
    - package

documentation:
  architecture: |
    This is a server-only deployment of the MCP (Model Context Protocol) server 
    that provides AI models with direct access to Meilisearch's functionalities.

    The server exposes a StreamableHTTP transport implementation of MCP with tools for:
    - System operations (health checks, version info)
    - Index management (create, update, delete)
    - Document operations (add, update, retrieve)
    - Search capabilities (including vector search)
    - Settings management
    - Task management
